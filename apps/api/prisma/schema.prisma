// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GoalStatus {
  PLANNING
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
  FAILED
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum TaskStatus {
  PENDING
  COMPLETED
  SKIPPED
  OVERDUE
}

model User {
  id                    String   @id @default(uuid())
  email                 String   @unique
  password              String
  firstName             String?
  lastName              String?
  avatar                String?
  isEmailVerified       Boolean  @default(false)
  emailVerificationToken String?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  lastLoginAt           DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  goals                 Goal[]
  tasks                 Task[]
  timeEntries           TimeEntry[]
  taskComments          TaskComment[]
  settings              UserSettings?
  aiInteractions        AIInteraction[]
  refreshTokens         RefreshToken[]
}

model Goal {
  id                String      @id @default(uuid())
  userId            String
  title             String
  description       String?
  category          String?
  priority          String      @default("medium")
  status            String      @default("active")
  targetDate        DateTime?
  completedAt       DateTime?
  progress          Int         @default(0)
  aiSuggestions     Json?
  tags              Json?
  isArchived        Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks             Task[]
  timeEntries       TimeEntry[]
  milestones        Milestone[]
}

model Milestone {
  id              String   @id @default(uuid())
  name            String
  week_number     Int
  order_in_goal   Int
  goal            Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  goalId          String
  tasks           Task[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Task {
  id                    String   @id @default(uuid())
  userId                String
  goalId                String?
  title                 String
  description           String?
  priority              String   @default("medium")
  status                String   @default("pending")
  dueDate               DateTime?
  completedAt           DateTime?
  estimatedMinutes      Int?
  actualMinutes         Int?
  tags                  Json?
  dependencies          Json?
  isRecurring           Boolean  @default(false)
  recurringPattern      Json?
  parentTaskId          String?
  order                 Int      @default(0)
  isArchived            Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal                  Goal?        @relation(fields: [goalId], references: [id], onDelete: SetNull)
  comments              TaskComment[]
  timeEntries           TimeEntry[]

  @@index([userId])
  @@index([goalId])
}

// Task comments/notes
model TaskComment {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Time tracking
model TimeEntry {
  id          String    @id @default(uuid())
  userId      String
  taskId      String?
  goalId      String?
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Int?
  isManual    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  task        Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  goal        Goal?     @relation(fields: [goalId], references: [id], onDelete: Cascade)
}

// User preferences and settings
model UserSettings {
  id              String    @id @default(uuid())
  userId          String    @unique
  timezone        String    @default("UTC")
  dateFormat      String    @default("MM/DD/YYYY")
  timeFormat      String    @default("12h")
  weekStartsOn    Int       @default(0)
  theme           String    @default("light")
  notifications   Json?
  aiPreferences   Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// AI interactions and suggestions
model AIInteraction {
  id        String   @id @default(uuid())
  userId    String
  type      String
  input     Json
  output    Json
  metadata  Json?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Refresh tokens for JWT
model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
